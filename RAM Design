module sync_ram #(
    parameter DATA_WIDTH = 8,
    parameter ADDR_WIDTH = 4
)(
    input clk,
    input we,                // Write enable
    input [ADDR_WIDTH-1:0] addr,
    input [DATA_WIDTH-1:0] din,
    output reg [DATA_WIDTH-1:0] dout
);

    // Memory declaration
    reg [DATA_WIDTH-1:0] mem [0:(1<<ADDR_WIDTH)-1];

    always @(posedge clk) begin
        if (we)
            mem[addr] <= din;       // Write operation
        dout <= mem[addr];          // Read happens on every clock
    end

endmodule
//TESTBENCH
module tb_sync_ram;

    reg clk;
    reg we;
    reg [3:0] addr;
    reg [7:0] din;
    wire [7:0] dout;

    // Instantiate the RAM
    sync_ram uut (
        .clk(clk),
        .we(we),
        .addr(addr),
        .din(din),
        .dout(dout)
    );

    // Clock generation
    initial clk = 0;
    always #5 clk = ~clk; // 10 time units clock period

    initial begin
        // Monitor signals
        $monitor("Time=%0t, WE=%b, Addr=%h, Din=%h, Dout=%h", $time, we, addr, din, dout);

        // Initial values
        we = 0;
        addr = 0;
        din = 0;

        // Write to memory
        #10; we = 1; addr = 4'h3; din = 8'hA5;  // Write A5 at addr 3
        #10; we = 1; addr = 4'h7; din = 8'h5A;  // Write 5A at addr 7

        // Read from memory
        #10; we = 0; addr = 4'h3;               // Read from addr 3
        #10; we = 0; addr = 4'h7;               // Read from addr 7
        #10; we = 0; addr = 4'h1;               // Read from addr 1 (should be 0)

        #20; $finish;
    end
endmodule
